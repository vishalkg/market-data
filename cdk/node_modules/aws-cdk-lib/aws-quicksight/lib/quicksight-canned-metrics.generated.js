"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.QuickSightMetrics=void 0;class QuickSightMetrics{static dashboardViewCountSum(dimensions){return{namespace:"AWS/QuickSight",metricName:"DashboardViewCount",dimensionsMap:dimensions,statistic:"Sum"}}static dashboardViewLoadTimeAverage(dimensions){return{namespace:"AWS/QuickSight",metricName:"DashboardViewLoadTime",dimensionsMap:dimensions,statistic:"Average"}}static ingestionErrorCountSum(dimensions){return{namespace:"AWS/QuickSight",metricName:"IngestionErrorCount",dimensionsMap:dimensions,statistic:"Sum"}}static ingestionInvocationCountSum(dimensions){return{namespace:"AWS/QuickSight",metricName:"IngestionInvocationCount",dimensionsMap:dimensions,statistic:"Sum"}}static ingestionLatencyAverage(dimensions){return{namespace:"AWS/QuickSight",metricName:"IngestionLatency",dimensionsMap:dimensions,statistic:"Average"}}static ingestionRowCountSum(dimensions){return{namespace:"AWS/QuickSight",metricName:"IngestionRowCount",dimensionsMap:dimensions,statistic:"Sum"}}static spiceCapacityConsumedInMbAverage(dimensions){return{namespace:"AWS/QuickSight",metricName:"SPICECapacityConsumedInMB",dimensionsMap:dimensions,statistic:"Average"}}static spiceCapacityLimitInMbAverage(dimensions){return{namespace:"AWS/QuickSight",metricName:"SPICECapacityLimitInMB",dimensionsMap:dimensions,statistic:"Average"}}static visualLoadTimeAverage(dimensions){return{namespace:"AWS/QuickSight",metricName:"VisualLoadTime",dimensionsMap:dimensions,statistic:"Average"}}static visualLoadErrorCountSum(dimensions){return{namespace:"AWS/QuickSight",metricName:"VisualLoadErrorCount",dimensionsMap:dimensions,statistic:"Sum"}}}exports.QuickSightMetrics=QuickSightMetrics;
